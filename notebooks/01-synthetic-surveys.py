# ---
# jupyter:
#   jupytext:
#     formats: ipynb,py:light
#     text_representation:
#       extension: .py
#       format_name: light
#       format_version: '1.5'
#       jupytext_version: 1.3.2
#   kernelspec:
#     display_name: Python [conda env:eql_source_layouts]
#     language: python
#     name: conda-env-eql_source_layouts-py
# ---

# # Create synthetic ground and airborne surveys from a synthetic model

# **Import useful packages**

# +
from IPython.display import display
import os
import pyproj
import numpy as np
import verde as vd
import harmonica as hm
import matplotlib.pyplot as plt
from matplotlib.collections import PatchCollection

from eql_source_layouts import (
    synthetic_model,
    grid_to_dataarray,
)

# -

# **Define parameters**

# +
# Define results directories
results_dir = os.path.join("..", "results")
ground_results_dir = os.path.join(results_dir, "ground_survey")
airborne_results_dir = os.path.join(results_dir, "airborne_survey")

# Define a survey region of 1 x 1 degrees (~ 100km x 100km)
region_degrees = (-0.5, 0.5, -0.5, 0.5)

# Define bottom and top of the synthetic model
model_bottom, model_top = -10e3, 0

# Define which field will be meassured
field = "g_z"
field_units = "mGal"

# Define standard deviation for the Gaussian noise that
# will be added to the synthetic survey (in mGal)
noise_std = 1

# Define a seed to reproduce the same results on each run
np.random.seed(12345)

# Define the spacing of the target regular grid
# and its observation height
target_grid_spacing = 2e3
target_grid_height = 2000
# -

# ## Synthetic model made out of prisms

# Project region coordinates to get synthetic model boundaries

# +
projection = pyproj.Proj(proj="merc", lat_ts=0)
easting, northing = projection(region_degrees[:2], region_degrees[2:])

# Define region and model_region
region = (min(easting), max(easting), min(northing), max(northing))
model_region = tuple(list(region) + [model_bottom, model_top])
# -

# Create synthetic model

model = synthetic_model(model_region)

fig, ax = plt.subplots(figsize=(6, 6))
ax.add_collection(PatchCollection(model["rectangles"], match_original=True))
ax.set_aspect("equal")
ax.set_title("Synthetic model made out of prisms")
ax.set_xlim(region[:2])
ax.set_ylim(region[2:4])
plt.show()

# ## Synthetic ground survey

# Get coordinates of observation points

survey = hm.synthetic.ground_survey(region=region_degrees)
display(survey)

# Project observation points

survey["easting"], survey["northing"] = projection(
    survey.longitude.values, survey.latitude.values
)
display(survey)

# Plot the survey points

fig, ax = plt.subplots(figsize=(6, 6))
tmp = ax.scatter(survey.easting, survey.northing, c=survey.height, s=6)
plt.colorbar(tmp, ax=ax, label="m")
ax.set_aspect("equal")
ax.set_title("Height of ground survey points")
plt.show()

# Compute gravitational field of synthetic model on ground survey

coordinates = (survey.easting, survey.northing, survey.height)
survey[field] = hm.prism_gravity(
    coordinates, model["prisms"], model["densities"], field=field
) + np.random.normal(scale=noise_std, size=survey.easting.size)
display(survey)

# Save ground survey for future usage

survey.to_csv(os.path.join(ground_results_dir, "survey.csv"), index=False)

# ## Synthetic airborne survey

# Get coordinates of observation points

survey = hm.synthetic.airborne_survey(region=region_degrees)
display(survey)

# Project observation points

survey["easting"], survey["northing"] = projection(
    survey.longitude.values, survey.latitude.values
)
display(survey)

# Plot the survey points

fig, ax = plt.subplots(figsize=(6, 6))
tmp = ax.scatter(survey.easting, survey.northing, c=survey.height, s=6)
plt.colorbar(tmp, ax=ax, label="m")
ax.set_aspect("equal")
ax.set_title("Height of airborne survey points")
plt.show()

# Compute gravitational field of synthetic model on airborne survey

coordinates = (survey.easting, survey.northing, survey.height)
survey[field] = hm.prism_gravity(
    coordinates, model["prisms"], model["densities"], field=field
) + np.random.normal(scale=noise_std, size=survey.easting.size)
display(survey)

# Save ground survey for future usage

survey.to_csv(os.path.join(airborne_results_dir, "survey.csv"), index=False)

# ## Compute gravity field on target grid

# We want to compute the true gravitational effect generated by the synthetic model on
# a regular grid at a constant height.

grid = vd.grid_coordinates(
    region=region,
    spacing=target_grid_spacing,
    adjust="region",
    extra_coords=target_grid_height,
)

target = hm.prism_gravity(grid, model["prisms"], model["densities"], field=field)
target = grid_to_dataarray(target, grid, attrs={"height": target_grid_height})

# Save target grid to disk for future usage

target.to_netcdf(os.path.join(results_dir, "target.nc"))

# +
# Load matplotlib configuration
plt.style.use(os.path.join("..", "matplotlib.rc"))

width = 3.33
figsize = (width, width * 0.85)
fig, ax = plt.subplots(figsize=figsize)

tmp = target.plot.pcolormesh(
    ax=ax, add_colorbar=False, cmap="viridis", center=False, rasterized=True
)
ax.set_aspect("equal")
ax.ticklabel_format(axis="both", style="sci", scilimits=(0, 0))
# ax.xaxis.set_label_position('top')
# ax.xaxis.tick_top()
ax.set_xlabel(ax.get_xlabel() + " [m]")
ax.set_ylabel(ax.get_ylabel() + " [m]")
clb = plt.colorbar(tmp, ax=ax, shrink=1, orientation="vertical", pad=0.03, aspect=30)
clb.set_label("mGal", labelpad=-15, y=1.05, rotation=0)

plt.tight_layout()
plt.savefig(
    os.path.join("..", "manuscript", "figs", "target-grid.pdf"),
    bbox_inches="tight",
    dpi=300,
)
plt.show()
# -
